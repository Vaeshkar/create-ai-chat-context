const fs = require("fs-extra");
const path = require("path");
const chalk = require("chalk");
const ora = require("ora");

/**
 * Generate Claude Projects export
 */
async function generateClaudeProject(options = {}) {
  const cwd = process.cwd();
  const aiDir = path.join(cwd, ".ai");
  const claudeProjectPath = path.join(cwd, "CLAUDE_PROJECT.md");

  // Check if .ai directory exists
  if (!(await fs.pathExists(aiDir))) {
    console.log(chalk.red("\n‚ùå No .ai/ directory found.\n"));
    console.log(chalk.gray("   Run: npx create-ai-chat-context init\n"));
    return;
  }

  const spinner = ora("Generating Claude Projects export...").start();

  try {
    // Check if CLAUDE_PROJECT.md already exists
    if ((await fs.pathExists(claudeProjectPath)) && !options.force) {
      spinner.fail("CLAUDE_PROJECT.md already exists");
      console.log(
        chalk.yellow(
          "\n‚ö†Ô∏è  CLAUDE_PROJECT.md file already exists. Use --force to overwrite.\n"
        )
      );
      return;
    }

    // Read all knowledge base files
    const files = [
      "README.md",
      "architecture.md",
      "technical-decisions.md",
      "conversation-log.md",
      "known-issues.md",
      "next-steps.md",
      "SETUP_GUIDE.md",
      "TOKEN_MANAGEMENT.md",
    ];

    let combinedContent = generateClaudeProjectHeader();

    // Read and combine all files
    for (const file of files) {
      const filePath = path.join(aiDir, file);
      if (await fs.pathExists(filePath)) {
        const content = await fs.readFile(filePath, "utf-8");
        combinedContent += `\n\n---\n\n# ${file.replace(".md", "")}\n\n${content}`;
      }
    }

    // Add footer
    combinedContent += generateClaudeProjectFooter();

    // Write the file
    await fs.writeFile(claudeProjectPath, combinedContent, "utf-8");

    spinner.succeed("CLAUDE_PROJECT.md created");

    console.log(chalk.green("\n‚úÖ Claude Projects export created!\n"));
    console.log(chalk.bold("üìù What this does:\n"));
    console.log("  ‚Ä¢ Combines all .ai/ files into one document");
    console.log("  ‚Ä¢ Formatted for Claude Projects");
    console.log("  ‚Ä¢ Easy to copy/paste into Claude");
    console.log();

    console.log(chalk.bold("üöÄ How to use:\n"));
    console.log("1. Open Claude.ai");
    console.log("2. Create a new Project");
    console.log("3. Go to Project Knowledge");
    console.log("4. Copy/paste the content of CLAUDE_PROJECT.md");
    console.log("5. All your chats in that project will have this context!");
    console.log();

    console.log(chalk.bold("üí° Tips:\n"));
    console.log("  ‚Ä¢ Regenerate this file after updating .ai/ files");
    console.log("  ‚Ä¢ Run: npx create-ai-chat-context claude-project --force");
    console.log(
      "  ‚Ä¢ Use 'npx create-ai-chat-context log' to add conversation entries"
    );
    console.log();

    // Add to .gitignore if it exists
    await addToGitignore(cwd, "CLAUDE_PROJECT.md");
  } catch (error) {
    spinner.fail("Failed to generate Claude Projects export");
    throw error;
  }
}

/**
 * Generate the header for Claude Projects export
 */
function generateClaudeProjectHeader() {
  return `# Project Knowledge Base

<!-- Auto-generated by create-ai-chat-context -->
<!-- https://www.npmjs.com/package/create-ai-chat-context -->

This document contains the complete knowledge base for this project. It combines all files from the \`.ai/\` directory into a single document for use with Claude Projects.

---

## üìö How to Use This in Claude Projects

1. **Create a Project** in Claude.ai
2. **Go to Project Knowledge** section
3. **Copy/paste this entire document** into the knowledge base
4. **All chats in that project** will automatically have this context!

---

## üéØ What's Included

This knowledge base contains:

- **Architecture** - System design and structure
- **Technical Decisions** - Why we made certain choices
- **Conversation Log** - Chat history and progress
- **Known Issues** - Current problems and workarounds
- **Next Steps** - Planned work and roadmap
- **Setup Guide** - How to use this system
- **Token Management** - How to manage context size

---

## üîÑ Keeping This Updated

Regenerate this file after updating your knowledge base:

\`\`\`bash
npx create-ai-chat-context claude-project --force
\`\`\`

---

## üìñ KNOWLEDGE BASE CONTENT

The following sections contain all the knowledge base files:
`;
}

/**
 * Generate the footer for Claude Projects export
 */
function generateClaudeProjectFooter() {
  return `

---

## üõ†Ô∏è MAINTENANCE COMMANDS

Help maintain this knowledge base:

\`\`\`bash
# Add conversation entry (interactive)
npx create-ai-chat-context log

# Validate knowledge base quality
npx create-ai-chat-context validate

# Check token usage
npx create-ai-chat-context check

# Archive old entries
npx create-ai-chat-context archive --keep 10

# Summarize old entries
npx create-ai-chat-context summary --keep 10

# Regenerate this Claude Projects export
npx create-ai-chat-context claude-project --force

# Generate Cursor integration
npx create-ai-chat-context cursor

# Generate GitHub Copilot integration
npx create-ai-chat-context copilot
\`\`\`

---

## üìù WORKFLOW FOR CLAUDE

### At START of conversation:

1. You already have all the context from this knowledge base
2. Check the conversation log to see what's been done
3. Check known issues before suggesting solutions
4. Understand the current state before making suggestions

### During conversation:

- Reference the knowledge base when making decisions
- Follow established patterns and conventions
- Respect technical decisions already made
- Suggest code that aligns with the project architecture

### At END of conversation:

- Remind user to update the conversation log
- Suggest: "Run \`npx create-ai-chat-context log\` to add this session"
- Remind: "Regenerate Claude Projects export with \`npx create-ai-chat-context claude-project --force\`"

---

## ‚úÖ BENEFITS

With this context, Claude can:

- ‚úÖ Have full project context from the start
- ‚úÖ No need to re-explain architecture or decisions
- ‚úÖ Make consistent suggestions across sessions
- ‚úÖ Generate code that follows project patterns
- ‚úÖ Faster development with less back-and-forth
- ‚úÖ Avoid suggesting solutions that were already tried and rejected

---

**Learn more:** [create-ai-chat-context on npm](https://www.npmjs.com/package/create-ai-chat-context)

**Last generated:** ${new Date().toISOString()}
`;
}

/**
 * Add entry to .gitignore if it doesn't exist
 */
async function addToGitignore(cwd, entry) {
  const gitignorePath = path.join(cwd, ".gitignore");

  if (!(await fs.pathExists(gitignorePath))) {
    return;
  }

  const content = await fs.readFile(gitignorePath, "utf-8");

  // Check if entry already exists
  if (content.includes(entry)) {
    return;
  }

  // Add entry
  const newContent =
    content.trim() + `\n\n# Claude Projects export\n${entry}\n`;
  await fs.writeFile(gitignorePath, newContent, "utf-8");
}

module.exports = {
  generateClaudeProject,
};

