const fs = require("fs-extra");
const path = require("path");
const chalk = require("chalk");
const ora = require("ora");

/**
 * Generate .github/copilot-instructions.md file for GitHub Copilot integration
 */
async function generateCopilotInstructions(options = {}) {
  const cwd = process.cwd();
  const aiDir = path.join(cwd, ".ai");
  const githubDir = path.join(cwd, ".github");
  const copilotInstructionsPath = path.join(
    githubDir,
    "copilot-instructions.md"
  );

  // Check if .ai directory exists
  if (!(await fs.pathExists(aiDir))) {
    console.log(chalk.red("\n‚ùå No .ai/ directory found.\n"));
    console.log(chalk.gray("   Run: npx create-ai-chat-context init\n"));
    return;
  }

  const spinner = ora("Generating GitHub Copilot instructions...").start();

  try {
    // Create .github directory if it doesn't exist
    await fs.ensureDir(githubDir);

    // Check if copilot-instructions.md already exists
    if ((await fs.pathExists(copilotInstructionsPath)) && !options.force) {
      spinner.fail("copilot-instructions.md already exists");
      console.log(
        chalk.yellow(
          "\n‚ö†Ô∏è  .github/copilot-instructions.md file already exists. Use --force to overwrite.\n"
        )
      );
      return;
    }

    // Generate the instructions content
    const instructionsContent = generateInstructionsContent();

    // Write the file
    await fs.writeFile(copilotInstructionsPath, instructionsContent, "utf-8");

    spinner.succeed(".github/copilot-instructions.md created");

    console.log(chalk.green("\n‚úÖ GitHub Copilot integration configured!\n"));
    console.log(chalk.bold("üìù What this does:\n"));
    console.log(
      "  ‚Ä¢ GitHub Copilot will automatically read your .ai/ knowledge base"
    );
    console.log("  ‚Ä¢ Context is loaded at the start of every chat");
    console.log("  ‚Ä¢ No need to manually prompt Copilot to read files");
    console.log();

    console.log(chalk.bold("üöÄ Next steps:\n"));
    console.log("1. Restart VS Code (if it's running)");
    console.log("2. Open GitHub Copilot Chat");
    console.log("3. Copilot will automatically have your project context!");
    console.log();

    console.log(chalk.bold("üí° Tips:\n"));
    console.log("  ‚Ä¢ Update .ai/ files regularly for best results");
    console.log(
      "  ‚Ä¢ Use 'npx create-ai-chat-context log' to add conversation entries"
    );
    console.log(
      "  ‚Ä¢ Run 'npx create-ai-chat-context check' to monitor token usage"
    );
    console.log();

    // Add to .gitignore if it exists
    await addToGitignore(cwd, ".github/copilot-instructions.md");
  } catch (error) {
    spinner.fail("Failed to generate copilot-instructions.md");
    throw error;
  }
}

/**
 * Generate the content for copilot-instructions.md file
 */
function generateInstructionsContent() {
  return `# GitHub Copilot Instructions

<!-- Auto-generated by create-ai-chat-context -->
<!-- https://www.npmjs.com/package/create-ai-chat-context -->

**IMPORTANT:** Read project context before starting work. This ensures you have full knowledge of the project architecture, decisions, and history.

---

## üìö REQUIRED READING (Read these files first)

Before making any suggestions or writing code, read these files in order:

### 1. **\`.ai-instructions\`** - Start here!
- Your entry point to the knowledge base
- Contains workflow instructions
- Links to all other knowledge base files
- Explains how to use the system

### 2. **\`.ai/README.md\`** - Overview
- Overview of the knowledge base system
- How the files are organized
- What each file contains

### 3. **\`.ai/architecture.md\`** - System Design
- How the project is structured
- Key components and their relationships
- Technology stack and choices
- Design patterns used

### 4. **\`.ai/technical-decisions.md\`** - Decision Log
- Important technical decisions made
- Rationale behind each decision
- Trade-offs considered
- Why certain approaches were chosen

### 5. **\`.ai/conversation-log.md\`** - Chat History
- What has been done in previous sessions
- Key decisions made during development
- Current state of the project
- Progress tracking

### 6. **\`.ai/known-issues.md\`** - Current Problems
- Known bugs and limitations
- Temporary solutions and workarounds
- Things to avoid
- Issues being tracked

### 7. **\`.ai/next-steps.md\`** - Roadmap
- What needs to be done next
- Priority order
- Future improvements
- Planned features

---

## üéØ WORKFLOW

### At START of conversation:

1. **Read all the files listed above** (they're in the \`.ai/\` directory)
2. **Check token usage** by counting conversation log entries
3. **If > 30 entries:** Tell user: "üìä Your conversation log has [X] entries. Run \`npx create-ai-chat-context check\` to see token usage."
4. **If > 50 entries:** Tell user: "üö® Your conversation log has [X] entries (large!). Consider running: \`npx create-ai-chat-context archive --keep 10\`"
5. **Understand the current state** before making suggestions

### During conversation:

- Reference the knowledge base when making decisions
- Follow established patterns and conventions
- Respect technical decisions already made
- Check known-issues before suggesting solutions
- Suggest code that aligns with the project architecture

### At END of conversation:

- Remind user to update the conversation log
- Suggest: "Run \`npx create-ai-chat-context log\` to add this session to the conversation log"
- Or: "Update \`.ai/conversation-log.md\` with what we accomplished today"

---

## üìä TOKEN MANAGEMENT

Be aware of token usage and help users manage it:

- **Check usage:** Suggest \`npx create-ai-chat-context check\`
- **Archive old entries:** Suggest \`npx create-ai-chat-context archive --keep 10\`
- **Summarize entries:** Suggest \`npx create-ai-chat-context summary --keep 10\`
- **Validate quality:** Suggest \`npx create-ai-chat-context validate\`

---

## ‚úÖ BENEFITS

With this context, you can:

- ‚úÖ Have full project context from the start
- ‚úÖ No need to re-explain architecture or decisions
- ‚úÖ Make consistent suggestions across sessions
- ‚úÖ Generate code that follows project patterns
- ‚úÖ Faster development with less back-and-forth
- ‚úÖ Avoid suggesting solutions that were already tried and rejected

---

## üîÑ KEEPING CONTEXT UPDATED

The user should update the knowledge base regularly:

- **After each chat session** ‚Üí Update conversation log
- **When making important decisions** ‚Üí Update technical-decisions.md
- **When architecture changes** ‚Üí Update architecture.md
- **When discovering issues** ‚Üí Update known-issues.md

**Remind them to do this at the end of each session!**

---

## üõ†Ô∏è AVAILABLE COMMANDS

Help users maintain their knowledge base:

\`\`\`bash
# Auto-update all .ai/ files (recommended after each chat)
npx create-ai-chat-context chat-finish

# Validate knowledge base quality
npx create-ai-chat-context validate

# Check token usage
npx create-ai-chat-context check

# Archive old entries
npx create-ai-chat-context archive --keep 10

# Summarize old entries
npx create-ai-chat-context summary --keep 10

# Generate Cursor integration
npx create-ai-chat-context cursor

# Generate Claude Projects export
npx create-ai-chat-context claude-project
\`\`\`

---

## üìù NOTES

- This file was auto-generated by \`create-ai-chat-context\`
- To regenerate: \`npx create-ai-chat-context copilot --force\`
- Keep your \`.ai/\` files updated for best results
- The more context you provide, the better the suggestions

---

**Learn more:** [create-ai-chat-context on npm](https://www.npmjs.com/package/create-ai-chat-context)
`;
}

/**
 * Add entry to .gitignore if it doesn't exist
 */
async function addToGitignore(cwd, entry) {
  const gitignorePath = path.join(cwd, ".gitignore");

  if (!(await fs.pathExists(gitignorePath))) {
    return;
  }

  const content = await fs.readFile(gitignorePath, "utf-8");

  // Check if entry already exists
  if (content.includes(entry)) {
    return;
  }

  // Add entry
  const newContent =
    content.trim() + `\n\n# GitHub Copilot instructions\n${entry}\n`;
  await fs.writeFile(gitignorePath, newContent, "utf-8");
}

module.exports = {
  generateCopilotInstructions,
};
