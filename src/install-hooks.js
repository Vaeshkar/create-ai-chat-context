const fs = require("fs-extra");
const path = require("path");
const chalk = require("chalk");
const ora = require("ora");

/**
 * Install Git hooks for knowledge base maintenance
 */
async function installGitHooks(options = {}) {
  const cwd = process.cwd();
  const gitDir = path.join(cwd, ".git");
  const hooksDir = path.join(gitDir, "hooks");
  const aiDir = path.join(cwd, ".ai");

  // Check if .ai directory exists
  if (!(await fs.pathExists(aiDir))) {
    console.log(chalk.red("\n‚ùå No .ai/ directory found.\n"));
    console.log(chalk.gray("   Run: npx create-ai-chat-context init\n"));
    return;
  }

  // Check if Git repository exists
  if (!(await fs.pathExists(gitDir))) {
    console.log(chalk.red("\n‚ùå No Git repository found.\n"));
    console.log(chalk.gray("   Initialize Git first: git init\n"));
    return;
  }

  const spinner = ora("Installing Git hooks...").start();

  try {
    // Ensure hooks directory exists
    await fs.ensureDir(hooksDir);

    // Install pre-commit hook
    const preCommitPath = path.join(hooksDir, "pre-commit");
    const preCommitContent = generatePreCommitHook();
    
    if ((await fs.pathExists(preCommitPath)) && !options.force) {
      spinner.warn("pre-commit hook already exists");
      console.log(
        chalk.yellow(
          "\n‚ö†Ô∏è  pre-commit hook already exists. Use --force to overwrite.\n"
        )
      );
      console.log(chalk.gray("   Or manually merge the hooks.\n"));
    } else {
      await fs.writeFile(preCommitPath, preCommitContent, { mode: 0o755 });
      spinner.text = "Installed pre-commit hook";
    }

    // Install post-commit hook
    const postCommitPath = path.join(hooksDir, "post-commit");
    const postCommitContent = generatePostCommitHook();
    
    if ((await fs.pathExists(postCommitPath)) && !options.force) {
      spinner.warn("post-commit hook already exists");
      console.log(
        chalk.yellow(
          "\n‚ö†Ô∏è  post-commit hook already exists. Use --force to overwrite.\n"
        )
      );
      console.log(chalk.gray("   Or manually merge the hooks.\n"));
    } else {
      await fs.writeFile(postCommitPath, postCommitContent, { mode: 0o755 });
      spinner.succeed("Git hooks installed");
    }

    console.log(chalk.green("\n‚úÖ Git hooks configured!\n"));
    console.log(chalk.bold("üìù What this does:\n"));
    console.log("  ‚Ä¢ pre-commit: Reminds you to update conversation log");
    console.log("  ‚Ä¢ post-commit: Suggests logging your commit");
    console.log();

    console.log(chalk.bold("üîÑ How it works:\n"));
    console.log("1. Before each commit: Check if log needs updating");
    console.log("2. After each commit: Remind to document changes");
    console.log("3. Helps maintain up-to-date knowledge base");
    console.log();

    console.log(chalk.bold("üí° Tips:\n"));
    console.log("  ‚Ä¢ Hooks run automatically with git commit");
    console.log("  ‚Ä¢ Use 'npx create-ai-chat-context log' to add entries");
    console.log("  ‚Ä¢ Bypass hooks with: git commit --no-verify");
    console.log();

    console.log(chalk.bold("üóëÔ∏è  Uninstall:\n"));
    console.log(chalk.gray("   rm .git/hooks/pre-commit"));
    console.log(chalk.gray("   rm .git/hooks/post-commit\n"));
  } catch (error) {
    spinner.fail("Failed to install Git hooks");
    throw error;
  }
}

/**
 * Generate pre-commit hook content
 */
function generatePreCommitHook() {
  return `#!/bin/sh
# AI Knowledge Base - Pre-commit Hook
# Auto-generated by create-ai-chat-context
# https://www.npmjs.com/package/create-ai-chat-context

# Colors
YELLOW='\\033[1;33m'
CYAN='\\033[0;36m'
NC='\\033[0m' # No Color

# Check if .ai directory exists
if [ ! -d ".ai" ]; then
  exit 0
fi

# Check if conversation log was modified
if git diff --cached --name-only | grep -q ".ai/conversation-log.md"; then
  # Log was updated, all good!
  exit 0
fi

# Check if any code files are being committed
CODE_FILES=$(git diff --cached --name-only | grep -E '\\.(js|ts|jsx|tsx|py|rs|go|java|cpp|c|h|css|html|md)$' || true)

if [ -n "$CODE_FILES" ]; then
  echo ""
  echo "\${YELLOW}üìù Reminder: Update your conversation log!\${NC}"
  echo ""
  echo "You're committing code changes but haven't updated:"
  echo "  \${CYAN}.ai/conversation-log.md\${NC}"
  echo ""
  echo "Consider running:"
  echo "  \${CYAN}npx create-ai-chat-context log\${NC}"
  echo ""
  echo "Or bypass this check with:"
  echo "  \${CYAN}git commit --no-verify\${NC}"
  echo ""
  
  # Don't block the commit, just remind
  exit 0
fi

exit 0
`;
}

/**
 * Generate post-commit hook content
 */
function generatePostCommitHook() {
  return `#!/bin/sh
# AI Knowledge Base - Post-commit Hook
# Auto-generated by create-ai-chat-context
# https://www.npmjs.com/package/create-ai-chat-context

# Colors
GREEN='\\033[0;32m'
CYAN='\\033[0;36m'
GRAY='\\033[0;90m'
NC='\\033[0m' # No Color

# Check if .ai directory exists
if [ ! -d ".ai" ]; then
  exit 0
fi

# Get commit message
COMMIT_MSG=$(git log -1 --pretty=%B)

# Check if this commit updated the conversation log
if echo "$COMMIT_MSG" | grep -q ".ai/conversation-log.md"; then
  # Log was updated in this commit, no need to remind
  exit 0
fi

# Check if any code files were committed
CODE_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD | grep -E '\\.(js|ts|jsx|tsx|py|rs|go|java|cpp|c|h|css|html|md)$' || true)

if [ -n "$CODE_FILES" ]; then
  echo ""
  echo "\${GREEN}‚úÖ Commit successful!\${NC}"
  echo ""
  echo "\${GRAY}üí° Don't forget to update your knowledge base:\${NC}"
  echo "  \${CYAN}npx create-ai-chat-context log\${NC}"
  echo ""
  echo "\${GRAY}What you just committed:\${NC}"
  echo "\${GRAY}  $COMMIT_MSG\${NC}"
  echo ""
fi

exit 0
`;
}

module.exports = {
  installGitHooks,
};

